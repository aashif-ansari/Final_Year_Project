# This is an auto-generated Django model module.
# You'll have to do the following manually to clean this up:
#   * Rearrange models' order
#   * Make sure each model has one field with primary_key=True
#   * Make sure each ForeignKey and OneToOneField has `on_delete` set to the desired behavior
#   * Remove `managed = False` lines if you wish to allow Django to create, modify, and delete the table
# Feel free to rename the models, but don't rename db_table values or field names.
from django.db import models



#backup

def bookservice(request,service_id):

    ff=Service.objects.get(service_id=service_id)
     
    if request.method == 'POST':
        # Retrieve data from form
        address = request.POST['c_address']
        mobile = request.POST['c_mobile']
        dob = request.POST['c_dob']
        
        service = request.POST['service_id']
        no_of_days = int(request.POST['no_of_days'])
   
        
            
        customer =  request.session['cid']
        
        # Fetch per day cost from database
        service1 = Service.objects.get(service_id=service)
        """
         per_day_cost = service.per_day_cost
        
        # Calculate total cost
        total_cost = no_of_days * per_day_cost
        """



        book_date = datetime.now()


        """
        d=int(duration)
        c=int(course)
        c2 = int(customer)

        obj=Enrolled.objects.filter(cust=c2,duration=d,course=c)
        if obj.exists():
            return redirect('webcourse')
        else:
        
        """


        booking = ServiceBooking.objects.create(book_date=book_date ,cust_id=customer, c_address=address, c_mobile=mobile, c_dob=dob,service=service1 )
        return render(request, 'webpages/index.html', {'booking': booking ,'book_date':book_date})
    
    return render(request,'servicebook.html',{'Service':ff})


#***************************

from portfolio.models import Profile

def index(request):
    return render(request,'index.html')

def showcourse(request):

    result=Course.objects.all()

    return render(request,'webcourse.html',{'display':result})

def showservice(request):

    result=Service.objects.all()

    return render(request,'webservice.html',{'Service':result})

def showfeed(request):
    return render(request,'feed.html')

def showsetting(request):
    return render(request,'setting.html')

#*******************

 <form action="{% url 'makepost' %}" method="POST" enctype="multipart/form-data">
                                        {% csrf_token %}
                                        <p class="my-3 leading-6"> Upload pics
                                        </p>
                                        <div>
                                            <input type="file" name="image_upload">
                                            <!-- <a href="#" class="button soft-warning small"> Choose file</a> -->
                                            <textarea class="button soft-warning small" name="caption" placeholder="enter your caption..." ></textarea>
                                            <br>
                                            {% comment %} <input type="submit" name="submit" value="Upload" class="button bg-blue-700"/> {% endcomment %}
                                            <input type="submit" value="Submit" name="submit">
                                        </div>
                                    </form>
















class Admin(models.Model):
    admin_id = models.AutoField(primary_key=True)
    admin_name = models.CharField(max_length=45, blank=True, null=True)
    admin_email = models.CharField(max_length=50)
    password = models.CharField(max_length=10, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'admin'


class Advertisement(models.Model):
    ad_id = models.AutoField(primary_key=True)
    ad_name = models.CharField(max_length=25, blank=True, null=True)
    ad_desc = models.CharField(max_length=100, blank=True, null=True)
    ad_date = models.DateField(blank=True, null=True)
    ad_image = models.CharField(max_length=45, blank=True, null=True)
    company_link = models.CharField(max_length=45, blank=True, null=True)
    admin_admin_id = models.IntegerField(db_column='Admin_admin_id')  # Field name made lowercase.

    class Meta:
        managed = False
        db_table = 'advertisement'


class Audition(models.Model):
    audition_id = models.AutoField(primary_key=True)
    audition_type = models.CharField(max_length=25, blank=True, null=True)
    cand_fname = models.CharField(max_length=10, blank=True, null=True)
    cand_height = models.CharField(max_length=25)
    cand_weight = models.CharField(max_length=25)
    cand_qual = models.CharField(max_length=45)
    mediafile = models.CharField(max_length=45)
    student_stu_id = models.IntegerField(db_column='Student_stu_id', blank=True, null=True)  # Field name made lowercase.
    customer_cust_id = models.IntegerField(db_column='Customer_cust_id', blank=True, null=True)  # Field name made lowercase.

    class Meta:
        managed = False
        db_table = 'audition'


class AuthGroup(models.Model):
    name = models.CharField(unique=True, max_length=150)

    class Meta:
        managed = False
        db_table = 'auth_group'


class AuthGroupPermissions(models.Model):
    id = models.BigAutoField(primary_key=True)
    group = models.ForeignKey(AuthGroup, models.DO_NOTHING)
    permission = models.ForeignKey('AuthPermission', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'auth_group_permissions'
        unique_together = (('group', 'permission'),)


class AuthPermission(models.Model):
    name = models.CharField(max_length=255)
    content_type = models.ForeignKey('DjangoContentType', models.DO_NOTHING)
    codename = models.CharField(max_length=100)

    class Meta:
        managed = False
        db_table = 'auth_permission'
        unique_together = (('content_type', 'codename'),)


class AuthUser(models.Model):
    password = models.CharField(max_length=128)
    last_login = models.DateTimeField(blank=True, null=True)
    is_superuser = models.IntegerField()
    username = models.CharField(unique=True, max_length=150)
    first_name = models.CharField(max_length=150)
    last_name = models.CharField(max_length=150)
    email = models.CharField(max_length=254)
    is_staff = models.IntegerField()
    is_active = models.IntegerField()
    date_joined = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'auth_user'


class AuthUserGroups(models.Model):
    id = models.BigAutoField(primary_key=True)
    user = models.ForeignKey(AuthUser, models.DO_NOTHING)
    group = models.ForeignKey(AuthGroup, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'auth_user_groups'
        unique_together = (('user', 'group'),)


class AuthUserUserPermissions(models.Model):
    id = models.BigAutoField(primary_key=True)
    user = models.ForeignKey(AuthUser, models.DO_NOTHING)
    permission = models.ForeignKey(AuthPermission, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'auth_user_user_permissions'
        unique_together = (('user', 'permission'),)


class Comment(models.Model):
    com_id = models.AutoField(primary_key=True)
    com_desc = models.CharField(max_length=100, blank=True, null=True)
    com_date = models.DateField(blank=True, null=True)
    student_stu_id = models.IntegerField(db_column='Student_stu_id', blank=True, null=True)  # Field name made lowercase.
    customer_cust_id = models.IntegerField(db_column='Customer_cust_id', blank=True, null=True)  # Field name made lowercase.
    community_post_post_id = models.IntegerField(db_column='Community_post_post_id')  # Field name made lowercase.

    class Meta:
        managed = False
        db_table = 'comment'


class CommunityPost(models.Model):
    post_id = models.AutoField(primary_key=True)
    post_media = models.CharField(max_length=100, blank=True, null=True)
    post_type = models.CharField(max_length=10, blank=True, null=True)
    post_cap = models.CharField(max_length=100, blank=True, null=True)
    post_date = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'community_post'


class Course(models.Model):
    course_id = models.AutoField(primary_key=True)
    course_name = models.CharField(max_length=45, blank=True, null=True)
    course_cap = models.CharField(max_length=45, blank=True, null=True)
    course_desc = models.CharField(max_length=200, blank=True, null=True)
    course_aval_seat = models.IntegerField(blank=True, null=True)
    course_image = models.CharField(max_length=100, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'course'


class CourseDuration(models.Model):
    duration_id = models.AutoField(primary_key=True)
    course_duration = models.CharField(max_length=25, blank=True, null=True)
    course_fees = models.FloatField(blank=True, null=True)
    course_id = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'course_duration'


class Customer(models.Model):
    cust_id = models.AutoField(primary_key=True)
    cust_firstname = models.CharField(max_length=10, blank=True, null=True)
    cust_lastname = models.CharField(max_length=10, blank=True, null=True)
    cust_email = models.CharField(max_length=45, blank=True, null=True)
    cust_password = models.CharField(max_length=10, blank=True, null=True)
    cust_gender = models.CharField(max_length=6, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'customer'


class DjangoAdminLog(models.Model):
    action_time = models.DateTimeField()
    object_id = models.TextField(blank=True, null=True)
    object_repr = models.CharField(max_length=200)
    action_flag = models.PositiveSmallIntegerField()
    change_message = models.TextField()
    content_type = models.ForeignKey('DjangoContentType', models.DO_NOTHING, blank=True, null=True)
    user = models.ForeignKey(AuthUser, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'django_admin_log'


class DjangoContentType(models.Model):
    app_label = models.CharField(max_length=100)
    model = models.CharField(max_length=100)

    class Meta:
        managed = False
        db_table = 'django_content_type'
        unique_together = (('app_label', 'model'),)


class DjangoMigrations(models.Model):
    id = models.BigAutoField(primary_key=True)
    app = models.CharField(max_length=255)
    name = models.CharField(max_length=255)
    applied = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'django_migrations'


class DjangoSession(models.Model):
    session_key = models.CharField(primary_key=True, max_length=40)
    session_data = models.TextField()
    expire_date = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'django_session'


class Enrolled(models.Model):
    en_id = models.AutoField(primary_key=True)
    en_date = models.DateTimeField(blank=True, null=True)
    address = models.CharField(max_length=100)
    mobile = models.BigIntegerField()
    dob = models.DateField()
    duration = models.ForeignKey(CourseDuration, models.DO_NOTHING)
    course = models.ForeignKey(Course, models.DO_NOTHING)
    cust = models.ForeignKey(Customer, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'enrolled'


class Feedback(models.Model):
    f_id = models.AutoField(primary_key=True)
    feedback = models.CharField(max_length=100, blank=True, null=True)
    f_date = models.DateField(blank=True, null=True)
    student_stu_id = models.IntegerField(db_column='Student_stu_id', blank=True, null=True)  # Field name made lowercase.
    customer_cust_id = models.IntegerField(db_column='Customer_cust_id', blank=True, null=True)  # Field name made lowercase.

    class Meta:
        managed = False
        db_table = 'feedback'


class Payment(models.Model):
    pay_id = models.AutoField(primary_key=True)
    pay_method = models.CharField(max_length=25, blank=True, null=True)
    pay_amount = models.FloatField(blank=True, null=True)
    pay_date = models.DateField(blank=True, null=True)
    enrolled_en_id = models.IntegerField(db_column='Enrolled_en_id', blank=True, null=True)  # Field name made lowercase.
    service_booking_book_id = models.IntegerField(db_column='Service_booking_book_id', blank=True, null=True)  # Field name made lowercase.

    class Meta:
        managed = False
        db_table = 'payment'


class PortfolioFollowerscount(models.Model):
    id = models.BigAutoField(primary_key=True)
    follower = models.CharField(max_length=100)
    user = models.CharField(max_length=100)

    class Meta:
        managed = False
        db_table = 'portfolio_followerscount'


class PortfolioLikepost(models.Model):
    id = models.BigAutoField(primary_key=True)
    post_id = models.CharField(max_length=500)
    username = models.CharField(max_length=100)

    class Meta:
        managed = False
        db_table = 'portfolio_likepost'


class PortfolioPost(models.Model):
    id = models.CharField(primary_key=True, max_length=32)
    user = models.CharField(max_length=100)
    image = models.CharField(max_length=100)
    caption = models.TextField()
    created_at = models.DateTimeField()
    no_of_likes = models.IntegerField()

    class Meta:
        managed = False
        db_table = 'portfolio_post'


class PortfolioProfile(models.Model):
    id = models.BigAutoField(primary_key=True)
    id_user = models.IntegerField()
    bio = models.TextField()
    profileimg = models.CharField(max_length=100)
    location = models.CharField(max_length=100)
    user = models.ForeignKey(AuthUser, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'portfolio_profile'


class Service(models.Model):
    service_id = models.AutoField(primary_key=True)
    service_name = models.CharField(max_length=25, blank=True, null=True)
    service_desc = models.CharField(max_length=45, blank=True, null=True)
    no_of_days = models.IntegerField(blank=True, null=True)
    per_day_cost = models.FloatField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'service'


class ServiceBooking(models.Model):
    book_id = models.AutoField(primary_key=True)
    book_date = models.DateTimeField(blank=True, null=True)
    c_address = models.CharField(max_length=100)
    c_mobile = models.BigIntegerField()
    c_dob = models.DateField()
    book_price = models.FloatField()
    cust = models.ForeignKey(Customer, models.DO_NOTHING)
    service = models.ForeignKey(Service, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'service_booking'


class Staff(models.Model):
    staff_id = models.AutoField(primary_key=True)
    staff_firstname = models.CharField(max_length=10, blank=True, null=True)
    staff_lastname = models.CharField(max_length=10, blank=True, null=True)
    staff_password = models.CharField(max_length=8, blank=True, null=True)
    staff_address = models.CharField(max_length=100, blank=True, null=True)
    staff_email = models.CharField(max_length=45, blank=True, null=True)
    staff_mobile = models.BigIntegerField(blank=True, null=True)
    staff_joining_date = models.DateField(blank=True, null=True)
    staff_work_duration = models.CharField(max_length=25, blank=True, null=True)
    staff_leave = models.IntegerField(blank=True, null=True)
    staff_salary = models.FloatField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'staff'
